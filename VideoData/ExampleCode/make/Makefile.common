###############################################################################
##         (c) Copyright, Real-Time Innovations, All rights reserved.        ##
##                                                                           ##
##         Permission to modify and use for internal purposes granted.       ##
## This software is provided "as is", without warranty, express or implied.  ##
##                                                                           ##
###############################################################################

# This Makefile contains the common rules to build for all the architectures.
# It is included from the architecture-specific Makefile.
# This Makefile requires the following variables:
# - ARCH: Architecture to build (for example i86Linux2.6gcc4.4.5)
#
# Optional variables:
# - DEBUG: If set to '1', it turns on debugging information
# - SHAREDLIB: If set to '1', shared libraries will be used
# - CXX: compiler name.
# - CXXFLAGS: compiler flags: will be appended to $CXX command-line
# - CXXLD: linker name.
# - CXXLDFLAGS: linker flags: will be inserted at the beginning of CXXLD cmdline
# - SYSLIBS: additional system libraries to append to the CXXLD command-line

###############################################################################
# Ensure this Makefile is invoked with the right variable set
###############################################################################
ifeq ($(ARCH), )
$(info ***************************************************************)
$(info You cannot use this Makefile directly, instead use the         )
$(info architecture-specific Makefile. For example:                   )
$(info         gmake -f make/Makefile.i86Linux2.6gcc4.4.5             )
$(info ***************************************************************)
$(error Makefile variable ARCH is not set)
endif
###############################################################################
# Ensure $NDDSHOME is defined
###############################################################################
ifeq ($(NDDSHOME), )
$(info ***************************************************************)
$(info The environment variable 'NDDSHOME' is not set!                )
$(info To use this makefile you need to set NDDSHOME to the directory )
$(info where you have RTI Connext installed.                          )
$(info ***************************************************************)
$(error Makefile variable NDDSHOME is not set)
endif


# Define the sources and NDDS search path
INCLUDES := -Isrc -I$(NDDSHOME)/include \
           -I$(NDDSHOME)/include/ndds -I/usr/include/libxml2 \
           $(shell pkg-config --cflags gstreamer-app-1.0)
 

###############################################################################
# Modify build flags for debug/release
###############################################################################
ifeq ($(DEBUG),1)
CXXFLAGS += -g -O0 -D__STDC_CONSTANT_MACROS
ifeq ($(SHAREDLIB),1)
NDDSLIBS := -lnddscppd -lnddscd -lnddscored
else
NDDSLIBS := -lnddscppzd -lnddsczd -lnddscorezd
endif
else
CXXFLAGS += -O2 -D__STDC_CONSTANT_MACROS
ifeq ($(SHAREDLIB),1)
NDDSLIBS := -lnddscpp -lnddsc -lnddscore
else
NDDSLIBS := -lnddscppz -lnddscz -lnddscorez
endif
endif

LIBS := -L$(NDDSHOME)/lib/$(ARCH) -L/usr/lib $(NDDSLIBS) $(SYSLIBS) $(shell pkg-config --libs gstreamer-app-1.0)

MAKEDEPEND := $(CXX)

OBJDIR := objs
ARCH_OBJDIR := $(OBJDIR)/$(ARCH)
SRCDIR := src

IDL_NAME := VideoData
IDL_SRCDIR := $(SRCDIR)/Idl
IDL_FILE := $(IDL_SRCDIR)/$(IDL_NAME).idl
IDL_GENDIR := $(SRCDIR)/Generated
IDL_GENPAT := % %Support %Plugin 

IDL_GENPAT_ABS := $(addprefix $(IDL_GENDIR)/,$(IDL_GENPAT))
IDL_GENPAT_SOURCES := $(addsuffix .cxx,$(IDL_GENPAT_ABS))
IDL_GENPAT_HEADERS := $(addsuffix .h,$(IDL_GENPAT_ABS))
IDL_SOURCES := $(subst %,VideoData,$(IDL_GENPAT_SOURCES))
IDL_HEADERS := $(subst %,VideoData,$(IDL_GENPAT_HEADERS))
IDL_GENERATED := $(IDL_SOURCES) $(IDL_HEADERS)

IDL_OBJDIR := $(ARCH_OBJDIR)/Common
IDL_OBJPAT_ABS := $(addprefix $(IDL_OBJDIR)/,$(IDL_GENPAT))
IDL_OBJPAT_OBJS := $(addsuffix .o,$(IDL_OBJPAT_ABS))
IDL_OBJS := $(subst %,VideoData,$(IDL_OBJPAT_OBJS))

COMMON_NAME := Common
COMMON_SRCDIR := $(SRCDIR)/CommonInfrastructure
COMMON_OBJDIR := $(ARCH_OBJDIR)/$(COMMON_NAME)
COMMON_SRCS := $(wildcard $(COMMON_SRCDIR)/*.cxx)
COMMON_OBJS := $(addprefix $(COMMON_OBJDIR)/,$(notdir $(COMMON_SRCS:.cxx=.o)))
COMMON_DEPS := $(addsuffix .d,$(COMMON_OBJS))

PUB_NAME := VideoPublisher
PUB_SRCDIR := $(SRCDIR)/$(PUB_NAME)
PUB_OBJDIR := $(ARCH_OBJDIR)/$(PUB_NAME)
PUB_SRCS := $(wildcard $(PUB_SRCDIR)/*.cxx)
PUB_OBJS := $(addprefix $(PUB_OBJDIR)/,$(notdir $(PUB_SRCS:.cxx=.o)))
PUB_DEPS := $(addsuffix .d,$(PUB_OBJS))
PUB_EXECDIR := $(PUB_OBJDIR)
PUB_EXEC := $(PUB_EXECDIR)/$(PUB_NAME)

SUB_NAME := VideoSubscriber
SUB_SRCDIR := $(SRCDIR)/$(SUB_NAME)
SUB_OBJDIR := $(ARCH_OBJDIR)/$(SUB_NAME)
SUB_SRCS := $(wildcard $(SUB_SRCDIR)/*.cxx)
SUB_OBJS := $(addprefix $(SUB_OBJDIR)/,$(notdir $(SUB_SRCS:.cxx=.o)))
SUB_DEPS := $(addsuffix .d,$(SUB_OBJS))
SUB_EXECDIR := $(SUB_OBJDIR)
SUB_EXEC := $(SUB_EXECDIR)/$(SUB_NAME)

ALL_DEPS := $(COMMON_DEPS) $(PUB_DEPS) $(SUB_DEPS)
ALL_OBJS := $(IDL_OBJS) $(COMMON_OBJS) $(PUB_OBJS) $(SUB_OBJS)

###############################################################################
# Build Rules
###############################################################################

.PHONY: all link compile generate clean veryclean

all: link

###############################################################################
# Linking the executables from their objects
###############################################################################

#dependencies
link: $(PUB_EXEC) $(SUB_EXEC)

$(PUB_EXEC): $(PUB_OBJS) $(COMMON_OBJS) $(IDL_OBJS) | $(PUB_EXECDIR)
$(SUB_EXEC): $(SUB_OBJS) $(COMMON_OBJS) $(IDL_OBJS) | $(SUB_EXECDIR)

#recipes

$(PUB_EXEC) $(SUB_EXEC):
	@echo Linking $@; \
	$(CXXLD) $(CXXLDFLAGS) $^ $(LIBS) -o $@

###############################################################################
# Compiling the objects from source
###############################################################################

#dependencies

compile: $(ALL_OBJS)

$(IDL_OBJS):    | $(IDL_OBJDIR)
$(COMMON_DEPS): | $(COMMON_OBJDIR)
$(PUB_DEPS):    | $(PUB_OBJDIR)
$(SUB_DEPS):    | $(SUB_OBJDIR)

#recipes
#The compilation rule includes the 'side-effect' of generating dependency files
#See http://make.mad-scientist.net/papers/advanced-auto-dependency-generation/
#  for an explanation

define do-compile
echo Compiling $(@F); \
$(CXX) -MT $@ -MMD -MP -MF $@.Td $(CXXFLAGS) -o $@ $(DEFINES) $(INCLUDES) -c $<
mv -f $@.Td $@.d
endef

$(IDL_OBJS): $(IDL_OBJDIR)/%.o: $(IDL_GENDIR)/%.cxx $(IDL_OBJDIR)/%.o.d
	@$(do-compile)

$(COMMON_OBJS): $(COMMON_OBJDIR)/%.o: $(COMMON_SRCDIR)/%.cxx $(COMMON_OBJDIR)/%.o.d
	@$(do-compile)

$(PUB_OBJS): $(PUB_OBJDIR)/%.o: $(PUB_SRCDIR)/%.cxx $(PUB_OBJDIR)/%.o.d
	@$(do-compile)

$(SUB_OBJS): $(SUB_OBJDIR)/%.o: $(SUB_SRCDIR)/%.cxx $(SUB_OBJDIR)/%.o.d
	@$(do-compile)

$(IDL_OBJDIR)/%.o.d $(COMMON_OBJDIR)/%.o.d $(PUB_OBJDIR)/%.o.d $(SUB_OBJDIR)/%.o.d: ;
.PRECIOUS: $(IDL_OBJDIR)/%.o.d $(COMMON_OBJDIR)/%.o.d $(PUB_OBJDIR)/%.o.d $(SUB_OBJDIR)/%.o.d

ifeq (,$(filter $(MAKECMDGOALS), clean veryclean generate))
$(info Including dependencies files)
-include $(ALL_DEPS)
endif

###############################################################################
# Generate source files from the .idl file
###############################################################################

#dependendies

generate: $(IDL_GENERATED)
$(COMMON_OBJS) $(PUB_OBJS) $(SUB_OBJS): $(IDL_GENERATED)

$(IDL_GENERATED): $(IDL_FILE) | $(IDL_GENDIR)

#recipes

$(IDL_GENPAT_SOURCES) $(IDL_GENPAT_HEADERS): $(IDL_FILE)
ifeq ($(OS_ARCH), i86Win32)
	call $(NDDSHOME)/bin/rtiddsgen.bat -namespace -d $(IDL_GENDIR) $< -replace -language C++
else
	@echo Generating code from IDL file $<; \
	$(NDDSHOME)/bin/rtiddsgen -namespace -d $(IDL_GENDIR) $< -replace -language C++
endif

###############################################################################
# Here is how we create those subdirectories automatically.
###############################################################################

#dependencies: none here

#recipes

ALL_DIRS := $(IDL_GENDIR) $(COMMON_OBJDIR) $(PUB_OBJDIR) $(SUB_OBJDIR) $(DEPSDIR)

$(ALL_DIRS): 
	@echo "Creating directory $@"; \
	mkdir -p $@

###############################################################################
# Clean target: removes the objs dir
###############################################################################

clean:
	@rm -Rf $(ARCH_OBJDIR)
	@echo "Successfully deleted object and executable files for architecture $(ARCH)"
	@echo "To delete ALL the architectures and any generated file use target 'veryclean'"

veryclean:
	@rm -Rf $(OBJDIR)
	@rm -Rf $(IDL_GENDIR)
	@rm -Rf $(DEPSDIR)
	@echo "Deleted all executables, objects, dependency files and IDL-generated files"
